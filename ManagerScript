#coding: utf-8
import math
import tkinter as tk
import time

n = 100
m = 100
#заполняем 0-ми массивы
mass1 = [[0 for j in range(m)] for i in range(n)]
mass2 = [[0 for j in range(m)] for j in range(m)]

#ifTime =1

#menu
from tkinter import *
root = Tk()
#commands нужно добавить другие
def hello():
    print = "hello"


menubar = Menu(root)

#General
filemenu = Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", command=hello)
filemenu.add_command(label="Save", command=hello)
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)
#lifeScale
editmenu = Menu(menubar, tearoff=0)
editmenu.add_command(label="3", command=hello)
editmenu.add_command(label="4", command=hello)
editmenu.add_command(label="5", command=hello)
menubar.add_cascade(label="lifeScale", menu=editmenu)
#lifeSpeed
editmenu = Menu(menubar, tearoff=0)
editmenu.add_command(label="1", command=hello)
editmenu.add_command(label="2", command=hello)
editmenu.add_command(label="3", command=hello)
menubar.add_cascade(label="lifeSpeed", menu=editmenu)

# display the menu
root.config(menu=menubar)
root.mainloop()



def Start():
    global root,lifeScale,lifeSpeed,ifTime,generationCounter
    root = tk.Tk()
    ScaleX = 400
    ScaleY = 400
    root.geometry('400x400')
    lifeScale = 4 #масштаб
    lifeSpeed = 1 #скорость
    ifTime = 0 #остановка времени 0-если время стоит
    generationCounter = 0

def Update():
    for i in range(n):
        for j in range(m):

            cell = mass1[i][j]
            neidgboursAlive=0

            #считаем живых соседей
            if (mass1[(n + i - 1) % n][j] == 1):
                neidgboursAlive+=1
            if (mass1[(n + i + 1) % n][j] == 1):
                neidgboursAlive += 1
            if (mass1[(n + i - 1) % n][(n + j - 1) % n] == 1):
                neidgboursAlive += 1
            if (mass1[(n + i - 1) % n][(n + j + 1) % n] == 1):
                neidgboursAlive += 1
            if (mass1[(n + i + 1) % n][(n + j - 1) % n] == 1):
                neidgboursAlive += 1
            if (mass1[(n + i + 1) % n][(n + j + 1) % n] == 1):
                neidgboursAlive += 1
            if (mass1[i][(n + j - 1) % n] == 1):
                neidgboursAlive += 1
            if (mass1[i][(n + j + 1) % n] == 1):
                neidgboursAlive += 1

            #считаем следующее поколение в соответствии с правилами
            if cell == 1:
                if neidgboursAlive == 2 or neidgboursAlive == 3 :
                    mass2[i][j] = 1
                else:
                    mass2[i][j] = 0
            else:
                if neidgboursAlive == 3:
                    mass2[i][j] = 1
                else:
                    mass2[i][j] = 0
    generationCounter += 1

def Output(scale):
    {
        #выводим mass2 в соответсвие с масштабом scale
    }
def MouceClick(event):
    x = math.floor(event.x / lifeScale)
    y = math.floor(event.y / lifeScale)
    print(x,y)
    mass2[x][y] = (mass2[x][y] + 1) % 2

def CheckButtons():
    {
        root.bind('<1>',MouceClick)

    }

#старт

Start()

#time.sleep(lifeSpeed)
print(generationCounter)
if ifTime:
    Update()
CheckButtons()
Output(lifeScale)
mass1 = mass2

root.mainloop()
        #print(generationCounter)
